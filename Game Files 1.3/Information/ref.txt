
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
// = = = = = = = = = = = = = = =  * D I A L O G U E *  = = = = = = = = = = = = = = =
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

	
// Spacebar Press
	
function keyPressed(e)
	{
    if(e.keyCode==32)
		{
		_this.scan_dialogue();
		}
	}
	
// * * *  D I A L O G U E  B O X  /  T E X T  * * *

this.attach_dialogue_box = function()
	{
	// NOTE: The movie clip contains the variables dialogue_text and character_name.
	_this.dialogue_box = new lib.dialogue_box();
	this.addChild(_this.dialogue_box);
	dialogue_box_bounds = _this.dialogue_box.nominalBounds;
	_this.dialogue_box.x = 400;
	_this.dialogue_box.y = 600 - dialogue_box_bounds.height - 30;
	}
	
// Things to add: character_1 and character 2, animation (a: __ ), small graphics, CGs
	
// EXAMPLE:		M: ''This is my sentence.'' | m_happy, n_skeptical | a:m_happy_a
// EXAMPLE:		scg:small_graphic_example
// EXAMPLE:		placeCG:		changeCG:		removeCG:


// __ , __ : __ , __ | __ , __ : __ , __ | __ , __ : __ , __
	
//   scene_details[0] | scene_details[1] | scene_details[2]
//   subscene_details0[0] : subscene_details0[1] | subscene_details1[0] : subscene_details1[1] | subscene_details2[0] : subscene_details2[1]
//   subsubscene_details00[0] , subsubscene_details00[1] : subsubscene_details01[0] , subsubscene_details01[1] | etc. ...

	
// * * *  S C A N  D I A L O G U E  * * *
	
this.scan_dialogue = function()
	{
	if (this.scene_num < this.scene_length)
		{		
		var scene_details = this.my_scene[this.scene_num].split('|'); 
			
		var subscene_details0 = scene_details[0].split(':');
		
		if (subscene_details0[1] !== "")
			{
			var subsubscene_details00 = subscene_details0[0].split(','); _this.testing_var.text = subscene_details0[1];
			//var subsubscene_details01 = subscene_details0[1].split(','); 
			}

			
		// = = = = = F A D E  T O  B L A C K = = = = =			( COMPLETE )
		
		if (scene_details[0] == "black")
			{
			this.fadetoblack();
			this.scene_num++;
			}
			
		// = = = = = F A D E  T O  W H I T E = = = = =			( INCOMPLETE )
			
		/*else if (scene_details[0] == "white")
			{
			this.fadetowhite();
			this.scene_num++;
			}
			
		// = = = = = P A U S E = = = = =						( COMPLETE )
			
		else if (subscene_details0[0] == "pause")
			{
			this.removeDialogue();
			var pause_time = subscene_details0[1];
			var pause_interval = setInterval(pause_function.bind(this),pause_time);
			function pause_function()
				{
				this.removeChild(_this.dialogue_box);
				clearInterval(pause_interval);
				this.scene_num++;
				window.addEventListener("keydown", keyPressed, true);
				_this.scan_dialogue();
				}
			}
			
		// = = = = = C H O I C E = = = = =						( COMPLETE )
			
		else if (subscene_details0[0] == "choice")
			{
			_this.removeDialogue();
				
			var choice_box = new lib.choice_box();
			this.addChild(choice_box);
			choice_box_bounds = choice_box.nominalBounds;
			choice_box.x = 400; choice_box.y = 600 - choice_box_bounds.height/2 - 20;
				
			var choice_1_box = new lib.choice_mc();
			this.addChild(choice_1_box);
			choice_1_box.x = 400; choice_1_box.y = 600 - 2*choice_box_bounds.height/3 - 20;
			choice_1_box.addEventListener("click", choice_1.bind(this), true);
			
			var choice_2_box = new lib.choice_mc();
			this.addChild(choice_2_box);
			choice_2_box.x = 400; choice_2_box.y = 600 - choice_box_bounds.height/3 - 20;
			choice_2_box.addEventListener("click", choice_2.bind(this), true);
				
			choice_1_box.choice_text.text = subsubscene_details01[0];
			
			choice_2_box.choice_text.text = subsubscene_details01[1];
				
			function choice_1()
				{
				this.removeChild(choice_box); this.removeChild(choice_1_box); this.removeChild(choice_2_box);
				var choice_scene = eval("this." + String(_this.my_current_scene) + "_1");
				_this.my_current_scene = String(_this.my_current_scene) + "_1";
				_this.create_scene(choice_scene);
				}
				
			function choice_2()
				{
				this.removeChild(choice_box); this.removeChild(choice_1_box); this.removeChild(choice_2_box);
				var choice_scene = eval("this." + String(_this.my_current_scene) + "_2");
				_this.my_current_scene = String(_this.my_current_scene) + "_2";
				_this.create_scene(choice_scene);
				}
			}
		
		// = = = = = C O M P U T E R  G R A P H I C S = = = = =			( INCOMPLETE )
			
		else if (subscene_details0[0] == "placeCG")
			{
			this.removeDialogue();
			
			}
			
		else if (subscene_details0[0] == "changeCG")
			{
			this.removeDialogue();
			
			}
			
		else if (subscene_details0[0] == "removeCG")
			{
			this.removeDialogue();
			
			}
			
		// = = = = = C H A R A C T E R S = = = = =						( INCOMPLETE )
			
		else if (subscene_details0[0] == "enter")
			{
			this.removeDialogue();
			
			if (subsubscene_details01[0] !== "" && subsubscene_details01[1] !== "")
				{
				attachLeft.bind(this)();
				attachRight.bind(this)();
				}
				
			function attachLeft()
				{
				var character_1 = new lib.subsubscene_details01[0]();
				this.addChild(character_1);
				character_1_bounds = character_1.nominalBounds();
				character_1.x = (1/3)*800 - character_1_bounds.width;
				character_1.y = 600 - character_1_bounds.height;
				}
				
			function attachRight()
				{
				var character_2 = new lib.subsubscene_details01[1]();
				this.addChild(character_2);
				
				character_2_bounds = character_2.nominalBounds();
				character_2.x = (2/3)*800 - character_2_bounds.width;
				character_2.y = 600 - character_2_bounds.height;
				}
			}
			
		else if (scene_details[0] == "exit")
			{
			this.removeDialogue();
			
			}*/
		
		// = = = = = N O R M A L  D I A L O G U E  = = = = =			( INCOMPLETE )

		else
			{
			if (_this.dialogue_running == false)
				{
				_this.attach_dialogue_box();
				}
				
			if (scene_details[1] !== "") { _this.testing_var = "changing the characters ..." } 
			
			//Reset text
			this.dialogue_box.dialogue_text.text = "";
			this.dialogue_box.character_name.text = "";
			i = 0;
			
			//Thought
			if (subscene_details0[1] == null)
				{
				this.dialogue_box.character_name.text = "";
				var words1 = subscene_details0[0].split('');
				var words2 = subscene_details0[0];
					
				if (this.thought_running == false && this.dialogue_running == true) { _this.dialogue_box.gotoAndPlay("thought"); }
				if (this.dialogue_running == false) { this.dialogue_start = "thought"; }
				
				this.thought_running = true;
				}
				
			//Speech	
			else
				{				
				//Set character's name to the portion before :
				this.dialogue_box.character_name.text = subscene_details0[0]; //words0[0];
					
				//Split up the portion after : into individual characters
				var words1 = subscene_details0[1].split('');
				var words2 = subscene_details0[1];
					
				if (this.thought_running == true && this.dialogue_running == true) { _this.dialogue_box.gotoAndPlay("speech"); }
				if (this.dialogue_running == false) { this.dialogue_start = "speech"; }
				
				this.thought_running = false;
				}
				
			this.dialogue_running = true;
				
			//Start interval to begin typewriter effect
			var interval = setInterval(dialogue_function.bind(this), 30);
				
			//If the spacebar is pressed during typewriter effect, immediately finish the sentence
			window.removeEventListener("keydown", keyPressed, true);
			window.addEventListener("keydown", keyPressed1, true);
			
			function keyPressed1(e)
				{
				if(e.keyCode==32)
					{
					finish_sentence();
					}
				}
				
			function finish_sentence()
				{
				clearInterval(interval);
				_this.dialogue_box.dialogue_text.text = words2;
				_this.scene_num++;
					
				window.removeEventListener("keydown", keyPressed1, true);
				window.addEventListener("keydown", keyPressed, true);
				}
			
			//Typewriter effect
			function dialogue_function()
				{					
				if (i < words2.length)
					{
					this.dialogue_box.dialogue_text.text = this.dialogue_box.dialogue_text.text + words1[i]; i++;
					}
				else if (i == words2.length)
					{
					clearInterval(interval); _this.scene_num++; 
					window.removeEventListener("keydown", keyPressed1, true);
					window.addEventListener("keydown", keyPressed, true);
					}
				}
				
			}
		}
	else { }
	}
	
function scan_dialogue_int()
	{
	_this.scan_dialogue();
	}
	
this.removeDialogue = function()
	{
	_this.dialogue_box.gotoAndPlay("remove");
	window.removeEventListener("keydown", keyPressed, true);
	this.thought_running = "";
	this.dialogue_running = false;
	this.dialogue_start = "";
	}
	
// * * *  S C E N E  * * *
	
this.create_scene = function(my_new_scene)
	{	
	this.my_scene = my_new_scene; 
	this.scene_length = this.my_scene.length;
	this.scene_num = 0;
	this.thought_running = "";
	this.dialogue_running = false;
	this.scan_dialogue();
	}
